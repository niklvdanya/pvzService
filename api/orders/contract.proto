syntax = "proto3";

package orders;

option go_package = "gitlab.ozon.dev/safariproxd/homework/pkg/api";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "PVZ Orders Service";
    version: "1.0.0";
    description: "API для управления заказами в системе пункта выдачи заказов.";
  };
  host: "localhost:8081";
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service OrdersService {
    rpc AcceptOrder (AcceptOrderRequest) returns (OrderResponse) {
        option (google.api.http) = {
            post: "/v1/orders/accept",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Принять заказ от курьера";
            description: "Принимает заказ с указанным ID, ID получателя и сроком хранения. Заказ нельзя принять дважды. Если срок хранения в прошлом, выдается ошибка.";
        };
    };
    rpc ReturnOrder (OrderIdRequest) returns (OrderResponse) {
        option (google.api.http) = {
            post: "/v1/orders/return",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Вернуть заказ курьеру";
            description: "Возвращает заказ курьеру по указанному ID. Можно вернуть только заказы, которые не находятся у клиентов или у которых истек срок хранения. Заказ помечается как удаленный.";
        };
    };
    rpc ProcessOrders (ProcessOrdersRequest) returns (ProcessResult) {
        option (google.api.http) = {
            post: "/v1/orders/process",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Выдать заказы или принять возвраты клиента";
            description: "Обрабатывает выдачу заказов или прием возвратов для указанного пользователя и списка заказов. Выдача возможна только для принятых заказов с неистекшим сроком хранения. Возврат возможен в течение двух суток с момента выдачи. Все заказы должны принадлежать одному клиенту.";
        };
    };
    rpc ListOrders (ListOrdersRequest) returns (OrdersList) {
        option (google.api.http) = {
            get: "/v1/orders/list/{user_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получить список заказов";
            description: "Возвращает список заказов для указанного пользователя. Поддерживает получение последних N заказов или заказов, находящихся в ПВЗ, с опциональной пагинацией.";
        };
    };
    rpc ListReturns (ListReturnsRequest) returns (ReturnsList) {
        option (google.api.http) = {
            get: "/v1/orders/returns"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получить список возвратов клиентов";
            description: "Возвращает список возвращенных заказов с постраничной пагинацией, отсортированный от свежих возвратов к старым.";
        };
    };
    rpc GetHistory (GetHistoryRequest) returns (OrderHistoryList) {
        option (google.api.http) = {
            get: "/v1/orders/history"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получить историю заказов";
            description: "Возвращает историю изменений статуса всех заказов, отсортированную по времени последнего обновления.";
        };
    };
    rpc ImportOrders (ImportOrdersRequest) returns (ImportResult) {
        option (google.api.http) = {
            post: "/v1/orders/import",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Импортировать заказы";
            description: "Импортирует несколько заказов из предоставленного списка, валидируя каждый заказ.";
        };
    };
    rpc GetOrderHistory (OrderHistoryRequest) returns (OrderHistoryResponse) {
        option (google.api.http) = {
            get: "/v1/orders/{order_id}/history"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Получить историю статусов по заказу";
            description: "Возвращает историю изменений статуса для указанного заказа, отсортированную по убыванию времени изменения. Если заказ не найден, возвращается ошибка.";
        };
    };
}

message AcceptOrderRequest {
    uint64 order_id = 1 [(validate.rules).uint64.gt = 0];
    uint64 user_id = 2 [(validate.rules).uint64.gt = 0];
    google.protobuf.Timestamp expires_at = 3 [(validate.rules).timestamp.required = true, (validate.rules).timestamp.gt_now = true];
    optional PackageType package = 4;
    float weight = 5 [(validate.rules).float.gt = 0];
    float price = 6 [(validate.rules).float.gt = 0];
}

message OrderIdRequest {
    uint64 order_id = 1 [(validate.rules).uint64.gt = 0];
}

message ProcessOrdersRequest {
    uint64 user_id = 1 [(validate.rules).uint64.gt = 0];
    ActionType action = 2 [(validate.rules).enum = { defined_only: true, not_in: [0] }];
    repeated uint64 order_ids = 3 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.items.uint64.gt = 0];
}

enum ActionType {
    ACTION_TYPE_UNSPECIFIED = 0;
    ACTION_TYPE_ISSUE = 1;
    ACTION_TYPE_RETURN = 2;
}

message ListOrdersRequest {
    uint64 user_id = 1 [(validate.rules).uint64.gt = 0];
    bool in_pvz = 2;
    optional uint32 last_n = 3 [(validate.rules).uint32.gt = 0];
    optional Pagination pagination = 4;
}

message Pagination {
    uint32 page = 1 [(validate.rules).uint32.gte = 0];
    uint32 count_on_page = 2 [(validate.rules).uint32.gt = 0];
}

message ListReturnsRequest {
    Pagination pagination = 1;
}

message ImportOrdersRequest {
    repeated AcceptOrderRequest orders = 1 [(validate.rules).repeated.min_items = 1];
}

message GetHistoryRequest {
    Pagination pagination = 1;
}

message OrderHistoryRequest {
    uint64 order_id = 1 [(validate.rules).uint64.gt = 0];
}

message OrderHistoryResponse {
    repeated OrderHistory history = 1;
}

message OrderResponse {
    OrderStatus status = 1;
    uint64 order_id = 2;
}

message ProcessResult {
    repeated uint64 processed = 1;
    repeated uint64 errors = 2;
}

message OrdersList {
    repeated Order orders = 1;
    int32 total = 2;
}

message ReturnsList {
    repeated Order returns = 1;
}

message OrderHistoryList {
    repeated OrderHistory history = 1;
}

message ImportResult {
    int32 imported = 1;
    repeated uint64 errors = 2;
}

message Order {
    uint64 order_id = 1;
    uint64 user_id = 2;
    OrderStatus status = 3;
    google.protobuf.Timestamp expires_at = 4;
    float weight = 5;
    float total_price = 6;
    optional PackageType package = 7;
}

enum PackageType {
    PACKAGE_TYPE_UNSPECIFIED = 0;
    PACKAGE_TYPE_BAG = 1;
    PACKAGE_TYPE_BOX = 2;
    PACKAGE_TYPE_TAPE = 3;
    PACKAGE_TYPE_BAG_TAPE = 4;
    PACKAGE_TYPE_BOX_TAPE = 5;
}

enum OrderStatus {
    ORDER_STATUS_UNSPECIFIED = 0;
    ORDER_STATUS_EXPECTS = 1;
    ORDER_STATUS_ACCEPTED = 2;
    ORDER_STATUS_RETURNED = 3;
    ORDER_STATUS_DELETED = 4;
}

message OrderHistory {
    uint64 order_id = 1;
    OrderStatus status = 2;
    google.protobuf.Timestamp created_at = 3;
}