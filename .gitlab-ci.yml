variables:
  GO_VERSION: "1.23"
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass

stages:
  - validate
  - test
  - build

.go-cache: &go-cache
  cache:
    key: "${CI_JOB_NAME}-${GO_VERSION}"
    paths:
      - .cache/go-build/
      - .cache/go-mod/

.go-before-script: &go-before-script
  before_script:
    - apk add --no-cache git make curl
    - export GOPATH="$CI_PROJECT_DIR/.cache/go"
    - export GOCACHE="$CI_PROJECT_DIR/.cache/go-build"
    - export GOMODCACHE="$CI_PROJECT_DIR/.cache/go-mod"
    - export PATH="$GOPATH/bin:$PATH"

lint:
  stage: validate
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  script:
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    - gofmt -l . | tee /tmp/gofmt.out
    - test ! -s /tmp/gofmt.out || (echo "Code is not formatted. Run 'gofmt -w .'" && exit 1)
    - make linter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

dependencies:
  stage: validate
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  script:
    - go mod download
    - go mod verify
    - go mod tidy
    - git diff --exit-code go.mod go.sum || (echo "go.mod or go.sum is not up to date" && exit 1)
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

unit-tests:
  stage: test
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  script:
    - make test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test-coverage:
  stage: test
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  services:
    - name: postgres:16-alpine
      alias: postgres
      variables:
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  script:
    - apk add --no-cache postgresql-client
    - until pg_isready -h postgres -p 5432 -U $POSTGRES_USER; do sleep 1; done
    - go install github.com/pressly/goose/v3/cmd/goose@latest
    - export DSN="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB?sslmode=disable"
    - goose -dir ./migrations postgres "$DSN" up
    - make test-coverage
    - go install github.com/boumenot/gocover-cobertura@latest
    - gocover-cobertura < cover.out > coverage.xml
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - cover.html
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

e2e-tests:
  stage: test
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  script:
    - apk add --no-cache docker-cli
    - cd tests/suites/e2e
    - go test -v -timeout 10m ./...
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:
  stage: build
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  <<: *go-before-script
  script:
    - make build
    - go build -o /tmp/pvz ./cmd/pvz/
    - go build -o /tmp/outbox ./cmd/outbox/
    - go build -o /tmp/notifier ./cmd/notifier/
    - go build -o /tmp/gateway ./cmd/gateway/
    - go build -o /tmp/swagger ./cmd/swagger/
    - /tmp/pvz --help || echo "PVZ built successfully"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH