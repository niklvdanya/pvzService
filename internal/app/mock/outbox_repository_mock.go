// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/safariproxd/homework/internal/app.OutboxRepository -o outbox_repository_mock.go -n OutboxRepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OutboxRepositoryMock implements mm_app.OutboxRepository
type OutboxRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSave          func(ctx context.Context, payload []byte) (err error)
	funcSaveOrigin    string
	inspectFuncSave   func(ctx context.Context, payload []byte)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mOutboxRepositoryMockSave
}

// NewOutboxRepositoryMock returns a mock for mm_app.OutboxRepository
func NewOutboxRepositoryMock(t minimock.Tester) *OutboxRepositoryMock {
	m := &OutboxRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveMock = mOutboxRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*OutboxRepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOutboxRepositoryMockSave struct {
	optional           bool
	mock               *OutboxRepositoryMock
	defaultExpectation *OutboxRepositoryMockSaveExpectation
	expectations       []*OutboxRepositoryMockSaveExpectation

	callArgs []*OutboxRepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OutboxRepositoryMockSaveExpectation specifies expectation struct of the OutboxRepository.Save
type OutboxRepositoryMockSaveExpectation struct {
	mock               *OutboxRepositoryMock
	params             *OutboxRepositoryMockSaveParams
	paramPtrs          *OutboxRepositoryMockSaveParamPtrs
	expectationOrigins OutboxRepositoryMockSaveExpectationOrigins
	results            *OutboxRepositoryMockSaveResults
	returnOrigin       string
	Counter            uint64
}

// OutboxRepositoryMockSaveParams contains parameters of the OutboxRepository.Save
type OutboxRepositoryMockSaveParams struct {
	ctx     context.Context
	payload []byte
}

// OutboxRepositoryMockSaveParamPtrs contains pointers to parameters of the OutboxRepository.Save
type OutboxRepositoryMockSaveParamPtrs struct {
	ctx     *context.Context
	payload *[]byte
}

// OutboxRepositoryMockSaveResults contains results of the OutboxRepository.Save
type OutboxRepositoryMockSaveResults struct {
	err error
}

// OutboxRepositoryMockSaveOrigins contains origins of expectations of the OutboxRepository.Save
type OutboxRepositoryMockSaveExpectationOrigins struct {
	origin        string
	originCtx     string
	originPayload string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mOutboxRepositoryMockSave) Optional() *mOutboxRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for OutboxRepository.Save
func (mmSave *mOutboxRepositoryMockSave) Expect(ctx context.Context, payload []byte) *mOutboxRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OutboxRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &OutboxRepositoryMockSaveParams{ctx, payload}
	mmSave.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for OutboxRepository.Save
func (mmSave *mOutboxRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mOutboxRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OutboxRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &OutboxRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx
	mmSave.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSave
}

// ExpectPayloadParam2 sets up expected param payload for OutboxRepository.Save
func (mmSave *mOutboxRepositoryMockSave) ExpectPayloadParam2(payload []byte) *mOutboxRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OutboxRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &OutboxRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.payload = &payload
	mmSave.defaultExpectation.expectationOrigins.originPayload = minimock.CallerInfo(1)

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the OutboxRepository.Save
func (mmSave *mOutboxRepositoryMockSave) Inspect(f func(ctx context.Context, payload []byte)) *mOutboxRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for OutboxRepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by OutboxRepository.Save
func (mmSave *mOutboxRepositoryMockSave) Return(err error) *OutboxRepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OutboxRepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &OutboxRepositoryMockSaveResults{err}
	mmSave.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// Set uses given function f to mock the OutboxRepository.Save method
func (mmSave *mOutboxRepositoryMockSave) Set(f func(ctx context.Context, payload []byte) (err error)) *OutboxRepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the OutboxRepository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the OutboxRepository.Save method")
	}

	mmSave.mock.funcSave = f
	mmSave.mock.funcSaveOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// When sets expectation for the OutboxRepository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mOutboxRepositoryMockSave) When(ctx context.Context, payload []byte) *OutboxRepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OutboxRepositoryMock.Save mock is already set by Set")
	}

	expectation := &OutboxRepositoryMockSaveExpectation{
		mock:               mmSave.mock,
		params:             &OutboxRepositoryMockSaveParams{ctx, payload},
		expectationOrigins: OutboxRepositoryMockSaveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up OutboxRepository.Save return parameters for the expectation previously defined by the When method
func (e *OutboxRepositoryMockSaveExpectation) Then(err error) *OutboxRepositoryMock {
	e.results = &OutboxRepositoryMockSaveResults{err}
	return e.mock
}

// Times sets number of times OutboxRepository.Save should be invoked
func (mmSave *mOutboxRepositoryMockSave) Times(n uint64) *mOutboxRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of OutboxRepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	mmSave.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSave
}

func (mmSave *mOutboxRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements mm_app.OutboxRepository
func (mmSave *OutboxRepositoryMock) Save(ctx context.Context, payload []byte) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	mmSave.t.Helper()

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, payload)
	}

	mm_params := OutboxRepositoryMockSaveParams{ctx, payload}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := OutboxRepositoryMockSaveParams{ctx, payload}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("OutboxRepositoryMock.Save got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.payload != nil && !minimock.Equal(*mm_want_ptrs.payload, mm_got.payload) {
				mmSave.t.Errorf("OutboxRepositoryMock.Save got unexpected parameter payload, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originPayload, *mm_want_ptrs.payload, mm_got.payload, minimock.Diff(*mm_want_ptrs.payload, mm_got.payload))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("OutboxRepositoryMock.Save got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSave.SaveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the OutboxRepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, payload)
	}
	mmSave.t.Fatalf("Unexpected call to OutboxRepositoryMock.Save. %v %v", ctx, payload)
	return
}

// SaveAfterCounter returns a count of finished OutboxRepositoryMock.Save invocations
func (mmSave *OutboxRepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of OutboxRepositoryMock.Save invocations
func (mmSave *OutboxRepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to OutboxRepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mOutboxRepositoryMockSave) Calls() []*OutboxRepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*OutboxRepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *OutboxRepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *OutboxRepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OutboxRepositoryMock.Save at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OutboxRepositoryMock.Save at\n%s", m.SaveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OutboxRepositoryMock.Save at\n%s with params: %#v", m.SaveMock.defaultExpectation.expectationOrigins.origin, *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Errorf("Expected call to OutboxRepositoryMock.Save at\n%s", m.funcSaveOrigin)
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to OutboxRepositoryMock.Save at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), m.SaveMock.expectedInvocationsOrigin, afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OutboxRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OutboxRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OutboxRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveDone()
}
