version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: ./config/.env
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5433:5432"     
    volumes:
      - db-data:/var/lib/postgresql/data

  migrate:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    entrypoint: >
      sh -c "
        apk add --no-cache git &&
        go install github.com/pressly/goose/v3/cmd/goose@latest &&
        goose -dir ./migrations postgres \"postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@$$POSTGRES_HOST:$$POSTGRES_PORT/$$POSTGRES_DB?sslmode=disable\" up
      "
    depends_on:
      db:
        condition: service_healthy


  app:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/pvz"]
    depends_on:
      migrate:
        condition: service_completed_successfully
    ports:
      - "50051:50051"

  gateway:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/gateway"]
    depends_on:
      app:
        condition: service_started
    ports:
      - "8081:8081"

  swagger:
    image: golang:1.23-alpine
    working_dir: /src
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/swagger"]
    depends_on:
      app:
        condition: service_started
    ports:
      - "8082:8082"

volumes:
  db-data:
