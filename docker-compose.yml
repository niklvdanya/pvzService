version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: ./config/.env
    environment:
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_CONNECTIONS=on
      - POSTGRES_LOG_DISCONNECTIONS=on
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - pvz-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - pvz-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - pvz-network

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:29092 1 30 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic pvz.events-log &&
        echo 'Kafka topic created successfully'
      "
    networks:
      - pvz-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - pvz-network

  migrate:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    entrypoint: >
      sh -c "
        apk add --no-cache git &&
        go install github.com/pressly/goose/v3/cmd/goose@latest &&
        goose -dir ./migrations postgres \"postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db:5432/$$POSTGRES_DB?sslmode=disable\" up
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pvz-network

  app:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/pvz"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "50051:50051"
      - "6060:6060"
    networks:
      - pvz-network

  gateway:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/gateway"]
    depends_on:
      app:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - pvz-network

  swagger:
    image: golang:1.23-alpine
    working_dir: /src
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/swagger"]
    depends_on:
      app:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - pvz-network

  outbox-worker:
    image: golang:1.23-alpine
    working_dir: /src
    env_file: ./config/.env
    volumes:
      - .:/src
    command: ["go", "run", "./cmd/outbox"]
    depends_on:
      migrate:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
    networks:
      - pvz-network

volumes:
  db-data:

networks:
  pvz-network:
    driver: bridge